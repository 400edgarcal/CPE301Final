#include <DHT.h>
#include <LiquidCrystal.h>

// Pin Definitions
#define START_BUTTON 2 // Interrupt pin for Start Button
#define RESET_BUTTON 3
#define FAN_PIN 9
#define DHT_PIN 23
#define DHT_TYPE DHT11
#define YELLOW_LED 50
#define GREEN_LED 52
#define RED_LED 46
#define BLUE_LED 48
#define LCD_RS 31
#define LCD_EN 33
#define LCD_D4 35
#define LCD_D5 37
#define LCD_D6 39
#define LCD_D7 41
#define STEPPER_IN1 8
#define STEPPER_IN2 10
#define STEPPER_IN3 7
#define STEPPER_IN4 11
#define WATER_BUTTON 22 // Button simulating water sensor
#define STEPPER_BUTTON 18 // Button to control stepper motor
#define TEMP_THRESHOLD 78 // Temperature threshold in Fahrenheit
#define UPDATE_INTERVAL 60000 // 1 minute interval

LiquidCrystal lcd(LCD_RS, LCD_EN, LCD_D4, LCD_D5, LCD_D6, LCD_D7);
DHT dht(DHT_PIN, DHT_TYPE);

enum States { DISABLED, IDLE, ERROR, RUNNING };
volatile States currentState = DISABLED;
volatile bool startButtonPressed = false;
volatile bool resetButtonPressed = false;
volatile bool stepperButtonPressed = false;
unsigned long lastUpdateMillis = 0;

// ISR to handle the start button press
void handleStartButton() {
  startButtonPressed = true;
}

// ISR to handle the reset button press
void handleResetButton() {
  resetButtonPressed = true;
}

// ISR to handle the stepper motor button press
void handleStepperButton() {
  stepperButtonPressed = true;
}

void setup() {
  Serial.begin(9600);

  // Initialize Pins
  pinMode(START_BUTTON, INPUT_PULLUP);
  pinMode(RESET_BUTTON, INPUT_PULLUP);
  pinMode(FAN_PIN, OUTPUT);
  pinMode(YELLOW_LED, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);
  pinMode(RED_LED, OUTPUT);
  pinMode(BLUE_LED, OUTPUT);
  pinMode(WATER_BUTTON, INPUT_PULLUP);
  pinMode(STEPPER_BUTTON, INPUT_PULLUP);
  pinMode(STEPPER_IN1, OUTPUT);
  pinMode(STEPPER_IN2, OUTPUT);
  pinMode(STEPPER_IN3, OUTPUT);
  pinMode(STEPPER_IN4, OUTPUT);

  dht.begin(); // Initialize DHT sensor
  lcd.begin(16, 2); // Initialize LCD

  delay(2000);

  // Display initial temperature and humidity immediately
  float temperatureC = dht.readTemperature();
  float temperatureF = temperatureC * 9.0 / 5.0 + 32.0;
  float humidity = dht.readHumidity();

  lcd.setCursor(0, 0);
  lcd.print("Temp: ");
  lcd.print(temperatureF);
  lcd.print(" F");

  lcd.setCursor(0, 1);
  lcd.print("Hum: ");
  lcd.print(humidity);
  lcd.print(" %");



  // Attach interrupts
  attachInterrupt(digitalPinToInterrupt(START_BUTTON), handleStartButton, FALLING);
  attachInterrupt(digitalPinToInterrupt(RESET_BUTTON), handleResetButton, FALLING);
  attachInterrupt(digitalPinToInterrupt(STEPPER_BUTTON), handleStepperButton, FALLING);

}

void loop() {
  switch (currentState) {
    case DISABLED:
      handleDisabledMode();
      break;
    case IDLE:
      handleIdleMode();
      break;
    case ERROR:
      handleErrorMode();
      break;
    case RUNNING:
      handleRunningMode();
      break;
  }
  updateDisplay();
  handleStepperMotor();
}

void handleDisabledMode() {
  setLEDState(YELLOW_LED);
  digitalWrite(FAN_PIN, LOW); // Ensure fan is off

  if (startButtonPressed) {
    startButtonPressed = false;
    logStateTransition("DISABLED", "IDLE");
    currentState = IDLE;
  }
}

void handleIdleMode() {
  setLEDState(GREEN_LED);
  digitalWrite(FAN_PIN, LOW); // Ensure fan is off

  if (startButtonPressed) {
    startButtonPressed = false;
    logStateTransition("IDLE", "DISABLED");
    currentState = DISABLED;
  }

  float temperatureC = dht.readTemperature();
  float temperatureF = temperatureC * 9.0 / 5.0 + 32.0;

  if (temperatureF >= TEMP_THRESHOLD) {
    logStateTransition("IDLE", "RUNNING");
    currentState = RUNNING;
    return;
  }

  if (digitalRead(WATER_BUTTON) == LOW) {
    logStateTransition("IDLE", "ERROR");
    currentState = ERROR;
  }
}

void handleErrorMode() {
  setLEDState(RED_LED);
  digitalWrite(FAN_PIN, LOW); // Ensure fan is off
  lcd.clear();
  lcd.print("Water level too");
  lcd.setCursor(0, 1);
  lcd.print("low");

  if (resetButtonPressed) {
    resetButtonPressed = false;
    logStateTransition("ERROR", "IDLE");
    currentState = IDLE;
    lcd.clear(); // Clear LCD when leaving ERROR mode
  } else if (startButtonPressed) {
    startButtonPressed = false;
    logStateTransition("ERROR", "DISABLED");
    currentState = DISABLED;
    lcd.clear(); // Clear LCD when leaving ERROR mode
  }
}

void handleRunningMode() {
  setLEDState(BLUE_LED);
  digitalWrite(FAN_PIN, HIGH); // Turn on fan

  float temperatureC = dht.readTemperature();
  float temperatureF = temperatureC * 9.0 / 5.0 + 32.0;

  if (temperatureF < TEMP_THRESHOLD) {
    digitalWrite(FAN_PIN, LOW); // Turn off fan
    logStateTransition("RUNNING", "IDLE");
    currentState = IDLE;
    return;
  }

  if (digitalRead(WATER_BUTTON) == LOW) {
    digitalWrite(FAN_PIN, LOW); // Turn off fan
    logStateTransition("RUNNING", "ERROR");
    currentState = ERROR;
    return;
  }

  if (startButtonPressed) {
    startButtonPressed = false;
    digitalWrite(FAN_PIN, LOW); // Turn off fan
    logStateTransition("RUNNING", "DISABLED");
    currentState = DISABLED;
  }
}

void setLEDState(int activeLED) {
  digitalWrite(YELLOW_LED, activeLED == YELLOW_LED);
  digitalWrite(GREEN_LED, activeLED == GREEN_LED);
  digitalWrite(RED_LED, activeLED == RED_LED);
  digitalWrite(BLUE_LED, activeLED == BLUE_LED);
}

void updateDisplay() {
  if (currentState == ERROR) return; // Do not update LCD in ERROR state

  unsigned long currentMillis = millis();
  if (currentMillis - lastUpdateMillis >= UPDATE_INTERVAL) {
    lastUpdateMillis = currentMillis;

    float temperatureC = dht.readTemperature();
    float temperatureF = temperatureC * 9.0 / 5.0 + 32.0;
    float humidity = dht.readHumidity();

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Temp: ");
    lcd.print(temperatureF);
    lcd.print(" F");

    lcd.setCursor(0, 1);
    lcd.print("Hum: ");
    lcd.print(humidity);
    lcd.print(" %");
  }
}

void logStateTransition(const char* fromState, const char* toState) {
  unsigned long currentMillis = millis();
  Serial.print("Transition: ");
  Serial.print(fromState);
  Serial.print(" -> ");
  Serial.print(toState);
  Serial.print(" at time: ");
  Serial.print(currentMillis / 1000);
  Serial.println(" seconds");
}

void handleStepperMotor() {
  if (stepperButtonPressed && (currentState != ERROR)) {
    stepperButtonPressed = false;
    for (int i = 0; i < 10; i++) {
      digitalWrite(STEPPER_IN1, HIGH);
      digitalWrite(STEPPER_IN2, LOW);
      digitalWrite(STEPPER_IN3, LOW);
      digitalWrite(STEPPER_IN4, LOW);
      delay(10);

      digitalWrite(STEPPER_IN1, LOW);
      digitalWrite(STEPPER_IN2, HIGH);
      digitalWrite(STEPPER_IN3, LOW);
      digitalWrite(STEPPER_IN4, LOW);
      delay(10);

      digitalWrite(STEPPER_IN1, LOW);
      digitalWrite(STEPPER_IN2, LOW);
      digitalWrite(STEPPER_IN3, HIGH);
      digitalWrite(STEPPER_IN4, LOW);
      delay(10);

      digitalWrite(STEPPER_IN1, LOW);
      digitalWrite(STEPPER_IN2, LOW);
      digitalWrite(STEPPER_IN3, LOW);
      digitalWrite(STEPPER_IN4, HIGH);
      delay(10);
    }
  }
}
